package com.sort.insertion;

import java.awt.Color;
import java.awt.Graphics;

class Painter {
	private final int appletWidth = 1000;
	private final int appletHeight = 800;
	private final int maxHeight = 200;
	private final int topMargin = 30;
	private final int leftMargin = 10;
	private final int barLeftMargin = 35;
	private final int textHeight = 13;
	private int aSize;
	private BarBox[] barboxex;
	private int barWidth =25;
	private int barSeparation;
	private int outer;
	private int inner;
	private int outerOld;
	private int innerOld;
	private boolean doneFlag;
	private int codePart;
	private int comps;
	private int copies;
	private int initOrder;
	private Color newColor;
	private int drawMode;

	public Painter(int paramInt1, int paramInt2) {
		this.aSize = paramInt1;
		this.initOrder = paramInt2;
		this.barboxex = new BarBox[this.aSize + 2];
		
		this.barSeparation = 7;
		this.inner = (this.outer = 1);
		this.innerOld = (this.outerOld = 1);
		this.comps = 0;
		this.copies = 0;
		this.doneFlag = false;
		this.codePart = 1;
		Color localColor = new Color(0, 0, 0);
		int i;
		int j;
		if (this.initOrder == 1) {
			for (i = 0; i < this.aSize; i++) {
				j = 10 + (int) (Math.random() * 189.0D);

				this.barboxex[i] = new BarBox(j,j, Color.gray);
			}
		} else {
			for (i = 0; i < this.aSize; i++) {
				j = 195 - 195 * i / this.aSize;

				this.barboxex[i] = new BarBox(j,j, Color.gray);
			}
		}
		this.barboxex[(this.aSize + 1)] = new BarBox(0,0, Color.lightGray);
		this.drawMode = 2;
	}

	public void setDrawMode(int paramInt) {
		this.drawMode = paramInt;
	}

	public int getAppletWidth() {
		return 1000;
	}

	public int getAppletHeight() {
		return 800;
	}

	public boolean getDone() {
		return this.doneFlag;
	}

	public void arrowText(Graphics paramGraphics, Color paramColor,
			String paramString, int paramInt1, int paramInt2,
			boolean paramBoolean1, boolean paramBoolean2) {
		int x_cord = 35 + paramInt1 * (this.barWidth + this.barSeparation);
		int y_cord = 230 + (paramInt2 + 1) * 13;
		paramGraphics.setColor(paramColor);
		if (paramBoolean2) {
			paramGraphics.drawString(paramString, x_cord, y_cord);
		}
		if (paramBoolean1) {
			paramGraphics.drawLine(x_cord + this.barWidth / 2, 232, x_cord
					+ this.barWidth / 2, y_cord - 13);

			paramGraphics.drawLine(x_cord + this.barWidth / 2, 232, x_cord
					+ this.barWidth / 2 - 3, 237);
			paramGraphics.drawLine(x_cord + this.barWidth / 2, 232, x_cord
					+ this.barWidth / 2 + 3, 237);
		}
	}

	public void drawOneBar(Graphics paramGraphics, int paramInt) {
		int x_cord;
		if (this.barboxex[paramInt] == null) {
			x_cord = 35 + paramInt * (this.barWidth + this.barSeparation);

			paramGraphics.setColor(Color.pink);
			paramGraphics.fillRect(x_cord, 0, this.barWidth, 240);
		} else {
			int height  = this.barboxex[paramInt].getHeight();
			int value =this.barboxex[paramInt].getValue();
			int j = 35 + paramInt * (this.barWidth + this.barSeparation);
			int k = 230 - height;
			Color localColor = this.barboxex[paramInt].getColor();

			paramGraphics.setColor(Color.pink);
			paramGraphics.fillRect(j, 0, this.barWidth, 240);
			paramGraphics.setColor(localColor);
			paramGraphics.fill3DRect(j, k, this.barWidth, height, true);
			paramGraphics.fill3DRect(j, k, this.barWidth, height, true);
			paramGraphics.setColor(Color.blue);
			paramGraphics.drawString(" " + value, j + 2, k - 5);
			paramGraphics.setColor(localColor);
			
		}
	}

	public void draw(Graphics paramGraphics) {
		if (this.drawMode != 2) {
			switch (this.codePart) {

			case 1:
				drawOneBar(paramGraphics, this.inner);
				drawOneBar(paramGraphics, this.aSize + 1);
				break;
			case 2:
				drawOneBar(paramGraphics, this.aSize + 1);
				drawOneBar(paramGraphics, this.innerOld);
				drawOneBar(paramGraphics, this.inner);
				break;
			case 3:
				drawOneBar(paramGraphics, this.inner);
				drawOneBar(paramGraphics, this.aSize + 1);
				break;
			}
		}
			paramGraphics.setColor(Color.pink);
			paramGraphics.fillRect(0, 0, 800, 800);
			for (int i = 0; i < this.aSize; i++) {
				drawOneBar(paramGraphics, i);
			}
			drawOneBar(paramGraphics, this.aSize + 1);
		
		paramGraphics.setColor(Color.pink);
		paramGraphics.fillRect(0, 0, 135, 32);
		paramGraphics.setColor(Color.black);
		paramGraphics.drawString("Comparisons = " + this.comps, 10, 28);
		paramGraphics.drawString("Copies = " + this.copies, 10, 15);

		paramGraphics.setColor(Color.pink);
		paramGraphics.fillRect(0, 230, 370, 78);
		if (this.aSize == 10) {
			arrowText(paramGraphics, Color.red, "outer", this.outer, 1, true,
					true);
			arrowText(paramGraphics, Color.blue, "inner", this.inner, 2, true,
					true);
			arrowText(paramGraphics, Color.magenta, "temp", this.aSize + 1, 1,
					true, true);
		}
		switch (this.codePart) {
		case 1:
			if (this.doneFlag == true) {
				arrowText(paramGraphics, Color.black, "Sort is complete", 0, 3,
						false, true);
			} else {
				arrowText(paramGraphics, Color.black,
						"Will copy outer to temp", 0, 3, false, true);
			}
			break;
		case 2:
			if (this.inner > 0) {
				arrowText(paramGraphics, Color.black,
						"Have compared inner-1 and temp", 0, 3, false, true);
			} else {
				arrowText(paramGraphics, Color.black, "Now inner is 0, so", 0,
						3, false, true);
			}
			if ((this.inner > 0)
					&& (this.barboxex[(this.inner - 1)].getHeight() >= this.barboxex[(this.aSize + 1)]
							.getHeight())) {
				arrowText(paramGraphics, Color.black,
						"   Will copy inner-1 to inner", 0, 4, false, true);
			} else {
				arrowText(paramGraphics, Color.black, "   No copy necessary",
						0, 4, false, true);
			}
			break;
		case 3:
			arrowText(paramGraphics, Color.black, "Will copy temp to inner", 0,
					3, false, true);
			break;
		}

		arrowText(paramGraphics, Color.red, "xxx", this.outer, 1, true, false);
		arrowText(paramGraphics, Color.blue, "xxx", this.inner, 2, true, false);
		arrowText(paramGraphics, Color.magenta, "xxx", this.aSize + 1, 3, true,
				false);

		this.drawMode = 2;
	}

	public void sortStep() {
		switch (this.codePart) {
		case 1:
			this.barboxex[(this.aSize + 1)] = this.barboxex[this.outer];
			this.barboxex[this.outer] = null;
			this.copies += 1;
			this.innerOld = this.inner;
			this.inner = this.outer;
			this.codePart = 2;
			return;
		case 2:
			this.comps += 1;
			if ((this.inner > 0)
					&& (this.barboxex[(this.inner - 1)].getHeight() >= this.barboxex[(this.aSize + 1)]
							.getHeight())) {
				this.barboxex[this.inner] = this.barboxex[(this.inner - 1)];
				this.barboxex[(this.inner - 1)] = null;
				this.copies += 1;
				this.innerOld = this.inner;
				this.inner -= 1;
			} else {
				this.codePart = 3;
				return;
			}
			break;
		case 3:
			this.barboxex[this.inner] = this.barboxex[(this.aSize + 1)];
			this.barboxex[(this.aSize + 1)] = null;
			this.copies += 1;
			this.outerOld = this.outer;
			this.outer += 1;
			if (this.outer == this.aSize) {
				this.doneFlag = true;
			}
			this.codePart = 1;
			return;
		}
	}
}
